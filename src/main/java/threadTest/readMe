这是一个对线程的熟悉demo，目的在于了解自己对线程的熟悉度和掌握程度。
q1：实现2个线程+1 和2个线程-1
	（1）第一次实现：多个线程不能处理同一个变量。again 实现runable接口
		原因分析：主函数不是一个线程，申明了一个变量i，  子线程起了2个，一个加1,一个减1, 构造函数传递参数i。
		结果：子线程获取的i不是同一个对象。
	（2）第二次实现：和上例一样，但是继承Thread 。结果一致。
	（3）第三次实现：实现了多个线程的加减1,但是每次执行的结果顺序都是一致的。
		原因分析：主函数 是一个线程， 申明变量i， 子线程不在单独作为一个外部类，而是内部类。主线程的run方法执行子线程
		结果：实现了变量i的加减，但是每次执行的顺序都是一样的。
	（4）第四次实现：ok
		原因分析：主函数不是一个线程，申明变量i ， 子线程作为内部类实现 ， 主函数的普通方法执行子线程。
		结果：ok。
		
		在输出的时候，多线程对同一个对象操作的时候的结果不可预期，导致输出结果无规律可循。所以这就是多线程的不安全性
		如果对加减1的方法进行同步，那么每次执行的过程都是一致的。
		
q2：变量i 在继承Thread的外部类中（通过传参）不能共享，在内部类中却能实现共享。那么实现外部类线程共享同一个对象的demo
	（1）T1Test实现了基本的要求，但是对于线程的不可预期行，还没有获取想要的效果。
		想要的效果：一个线程往vector 中添加数字，一个线程取vector中的数字 ，但是执行顺序的不可预期性，没法预期很好的结果。
		思路：如果要做成想要的效果，那么实现就会类似保护暂停模式。
	（2）保护暂停模式的实现
		角色：客户端，服务器，请求队列，请求对象，Main 
		注意：在请求队列的添加请求和处理请求两个方法中，添加请求会notifyall，处理请求如果请求列表为空，那么wait(); 注意的地方
					就在这里wait().简单的来看貌似wait()放在处理请求对列的列表中并没有什么特别大的疑问，但是如果wait()放在了服务器
					中实现呢？那么就会报错。什么错，wait()处理的线程不是当前的线程。wait()的用法在同步方法或者同步块当中使用。而
					这里的请求队列为什么能用呢？类对多线程天生的友好性。
	（3）在T1Test当中，在取出列表的线程中引入wait()，就会报错。但是如果把列表封装成对象然后操作，那么就和保护暂停模式
			 如出一辙。